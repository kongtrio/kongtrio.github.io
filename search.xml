<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[GitHubPages+Hexo+nexT快速搭建个人博客]]></title>
    <url>%2F2017%2F06%2F07%2FGitHubPages-Hexo-nexT%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[​ 很早之前就想搭个自己的个人独立博客了,但是比较懒,自己又不擅长做前端页面，觉得做出来的页面太丑,所以一直拖着。之前的想法一直是自己开发,前端后端代码全包了。后来无意之间发现现在网上有很多种给非开发人员用的搭建博客的工具，如wordpress和hexo等。然后昨天心血来潮在网上找了几篇教程开始尝试搭建自己个人博客。废话不多说,直接开搞。 技术介绍​ 下面为搭建博客要用到的技术做简单的介绍,需要详细了解的请百度谷歌。 github pages ​ 众所周知，github是世界上最大的代码托管平台(不知道的请百度- -,然后注册一个github账号)。github pages是github的一个服务。其实通俗点讲就是一个静态站点部署服务。你可以创建一个特殊的仓库,然后这个仓库就是你站点资源的存放位置。之后你访问特定的url就可以访问你的那些静态资源。 hexo ​ hexo是一个用于快速搭建博客系统的工具。hexo支持用markdown语法编写你的博客。它基于nodeJs。(所以使用的时候需要安装nodeJs) nexT ​ nexT是目前下载量最大的一个hexo主题。它提供了丰富的文档和第三方服务帮我们搭建更强大的博客。 创建 gitHub pages页面​ 请确保你已经有gitHub账号了。没有请去注册一个。 ​ 英文好的请直接看https://pages.github.com 官方文档。毕竟我这里的教程可能会过期,但是官方文档用于不会。 中文版教程开始: ​ 1. 创建一个仓库(repository)。仓库名字必须为 yourname.github.io。这里的yourname必须是你的github账号名。比如我的gitHub账号名是kongtrio,那么我创建的仓库就是 kongtrio.github.io。 ​ 2. 记住这个仓库的git地址 https://github.com/kongtrio/kongtrio.github.io.git 。后面要用到 安装hexo 如果你的电脑没有装nodeJs,请去nodeJs官网下载安装包安装nodeJs。https://nodejs.org/en/download/.有的话请看步骤二。 安装完nodeJs你可以直接看hexo官方文档,跳过我下面的那些步骤。还是那句话，学习一个技术直接看官方文档就对了。 打开dos命令(如果你是mac用户或者linux用户,请打开shell)。输入命令 npm install -g hexo-cli安装hexo包。 安装完后,随便找个地方,建立一个站点。 下面是相关命令 123hexo init &lt;folder&gt; #建立一个站点cd &lt;folder&gt; #进入该目录npm install #初始化该站点 站点生成后,就可以开始写文章了。dos界面下,进入所在站点目录，输入hexo new [layout] &lt;title&gt;命令。hexo会自动帮你生成一个 &lt;title&gt;.md 的文件。然后你就可以在这个文件上编写你的博客内容了。 写完博客后,我们先试着在本地部署一下服务。还是在dos命令下，进入站点目录。一次输入: 123hexo clean # 清除缓存,之后会经常用到hexo g # 生成站点静态文件hexo s # 部署服务 执行完hexo s后终端会提示部署成功。然后我们在浏览器输入 http://localhost:4000。就可以访问我们的博客网站啦。 上面的步骤仅仅是在本地部署起了服务而已。想要让其他人访问到你的博客系统，还需要将站点资源发布到gitHub上面才行。首先，先按照一个npm包。打开dos命令,输入npm install hexo-deployer-git --save安装git工具。打开站点目录下面的配置文件_config.yml(用任意编辑器),配置deploy参数。一开始配置文件是这样的: 12deploy: type: 我们把它改成我们的git仓库地址。 12345deploy: type:git repo: https://github.com/kongtrio/kongtrio.github.io.git branch: master message: [message] 配置完后,在dos命令行输入。 123hexo cleanhexo ghexo d # 部署到远程仓库 执行hexo d的时候。会让你输入gitHub的用户密码,照常输入进去就好了。命令全部执行完后。我们就可以访问我们的博客网站了。https://kongtrio.github.io (请将kongtrio改成你的username) 使用nexT主题​ 博客是搭建好了, 但是我们发现hexo的默认主题风格比较丑。好在hexo的主题是可定制的。所以我们可以更换别人已经做好的主题。nexT就是其中一个比较强大的主题。下面简单的教大家怎么切换到这个主题。 先去nexT的github页面下载nexT项目。https://github.com/iissnan/hexo-theme-next。然后放到站点目录下面的一个themes文件夹中。解压。 解压后会得到一个hexo-theme-next-master文件夹。重命名成next。 修改站点配置文件_config.yml里面的theme参数,修改值为next。 重新清除缓存,生成新的资源文件，然后部署,主题就切换成next了。 nexT还提供了很多强大的功能,如搜索,评论,文章阅读数统计,百度站长统计等等。可以自行去阅读nexT的文档照着做。都非常方便简单。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>nexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springMVC,文件上传超过大小限制时的异常处理]]></title>
    <url>%2F2017%2F06%2F07%2FspringMVC-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%B6%85%E8%BF%87%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6%E6%97%B6%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%2F</url>
    <content type="text"><![CDATA[​ 今天要做一个文件上传的功能。想限制上传文件的大小，但是同时又想当用户上传文件的时候给出友好的页面提示所上传的文件过大。springMVC出现异常的时候默认的是出现一个网站异常的界面。那如何手动处理springMVC抛出的异常，并根据对应异常跳转到我们指定的页面呢？ ​ 谷歌了一下。可配置的大体有以下3种解决办法。 一、在spring-mvc.xml 中配置​ 在spring-mvc.xml中加上如下配置。 123456789&lt;bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"&gt; &lt;property name="exceptionMappings"&gt; &lt;props&gt; &lt;prop key="java.lang.Exception"&gt;redirect:/login/error&lt;/prop&gt; &lt;prop key="org.springframework.web.multipart.MaxUploadSizeExceededException"&gt;/error&lt;/prop&gt; &lt;/props&gt; &lt;/property&gt; &lt;property name="defaultStatusCode" value="500"/&gt; &lt;/bean&gt; ​ 这个配置可以指定哪种异常用哪种策略。比如上面我们配置了抛出MaxUploadSizeExceededException的时候跳转到/error这个视图。 二、实现HandlerExceptionResolver接口​ 对应的controller类实现HandlerExceptionResolver的resolveException方法，可以在代码中根据不同的异常来执行对应的策略。resolveException代码如下(返回json格式数据): 1234567891011121314public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) &#123; ModelAndView view = new ModelAndView(); view.setView(new MappingJacksonJsonView()); if (ex instanceof MaxUploadSizeExceededException) &#123; System.out.println("size excetion"); view.addObject("error data"); return view; &#125; else &#123; System.out.println("normal exception"); &#125; return null; &#125; 三、用注解@ControllerAdvice 实现全局异常捕获并处理​ 上面那种方法只能处理单个controller里面的异常。如果想要处理整个应用的异常，可以专门写一个GlobalExceptionHandler类来处理所以的异常。 ​ 代码如下。 123456789101112131415@ControllerAdvicepublic class GlobalExceptionHandler &#123; @ExceptionHandler(MaxUploadSizeExceededException.class) public String handleMaxUploadException(MaxUploadSizeExceededException e, HttpServletRequest request, HttpServletResponse response) &#123; ModelAndView mav = new ModelAndView(); boolean isJson = request.getRequestURL().toString().contains(".json"); if (isJson) &#123; mav.setView(new MappingJacksonJsonView()); mav.addObject("result", "nok"); &#125; else &#123; mav.setViewName("error"); &#125; return "error"; &#125;&#125; 如果试了以上3中办法可以了，就不用往下看了。 在谷歌上找来找去，基本都是以上几种办法。看其他人好像都没有什么问题，但是我把上面3种方法来回折腾了好几遍都死活不行(奇怪的是chrome、ie不可以，火狐浏览器却可以….其他浏览器没试)，也不懂问题出在哪里，只能以后有空把springMVC的源码翻一遍看看了。最后还是用拦截器解决了这个问题。 四、拦截器拦截附件大小超过限制的请求​ 只能自己写拦截器做附件大小限制。先不设置spring-mvc.xml中CommonsMultipartResolver的fileMaxSize的大小。 12345&lt;bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"&gt; &lt;!--表示延迟解析这个文件，先判断文件大小后再解析文件 --&gt; &lt;property name="resolveLazily" value="true"/&gt;&lt;/bean&gt; 设置自己的拦截器 12345678910&lt;mvc:interceptors&gt; &lt;mvc:interceptor&gt; &lt;mvc:mapping path="/"/&gt; &lt;mvc:mapping path="/*"/&gt; &lt;mvc:mapping path="/**"/&gt; &lt;bean class="com.imp.interceptor.FileSizeInterceptor"&gt; &lt;property name="maxFileSize" value="1048576"/&gt; &lt;/bean&gt; &lt;/mvc:interceptor&gt;&lt;/mvc:interceptors&gt; 拦截器代码 123456789101112131415161718192021222324252627282930313233343536373839/** * Created by yangjb on 2017/3/20. * 拦截附件大小超过maxFileSize的请求 */public class FileSizeInterceptor extends HandlerInterceptorAdapter &#123; private static final Logger LOGGER = LoggerFactory.getLogger(FileSizeInterceptor.class); //B为单位 private long maxFileSize; @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123; boolean isFileForm = ServletFileUpload.isMultipartContent(request); if (isFileForm) &#123; MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request; MultipartFile file = multipartRequest.getFile("file"); CommonsMultipartFile cf = (CommonsMultipartFile) file; if (cf.getSize() &gt; maxFileSize) &#123; LOGGER.info("file &#123;&#125; size &#123;&#125;B is bigger than &#123;&#125;B", cf.getSize(), cf.getOriginalFilename(), maxFileSize); response.sendRedirect(request.getContextPath() + "/process/list"); return false; &#125; &#125; return super.preHandle(request, response, handler); &#125; @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123; super.postHandle(request, response, handler, modelAndView); &#125; public long getMaxFileSize() &#123; return maxFileSize; &#125; public void setMaxFileSize(long maxFileSize) &#123; this.maxFileSize = maxFileSize; &#125;&#125; 写完终于搞定这个问题。 总结: 上面的拦截器是针对所有url进行拦截，并且只获取name=file的文件进行大小判断。可以进行相应改进 网上有些人在前端做限制，个人认为不够安全。最好能前后台都做限制。前端做限制的代码请自行谷歌。 @yangjb 2017.03.20]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
</search>